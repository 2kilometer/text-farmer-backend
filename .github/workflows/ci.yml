name: Django CI (Continuous Integration)

on:
  push:
    branches: ["main"]

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        ports:
          - 3306:3306
        options: >-
          --health-cmd "mysqladmin ping --silent"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.DATABASE_NAME }}
          MYSQL_USER: ${{ secrets.DATABASE_USER }}
          MYSQL_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8

    - name: Check current directory
      run: pwd

    - name: List files in current directory
      run: ls -la

    - name: Cache pip
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      working-directory: ./TransFarmers
      run: |
        if [ -f requirements.txt ]; then
          python -m venv .venv
          source .venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt
        else
          echo "requirements.txt not found. Exiting."
          exit 1
        fi

    - name: Create .env file for CI Test
      working-directory: ./TransFarmers
      run: |
        echo "CORS_ALLOWED_ORIGINS=${{ secrets.CORS_ALLOWED_ORIGINS }}" > .env
        echo "CSRF_TRUSTED_ORIGINS=${{ secrets.CSRF_TRUSTED_ORIGINS }}" >> .env
        echo "DATABASE_NAME=${{ secrets.DATABASE_NAME }}" >> .env
        echo "DATABASE_USER=${{ secrets.DATABASE_USER }}" >> .env
        echo "DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}" >> .env
        echo "DATABASE_HOST=127.0.0.1" >> .env  # MySQL 서비스 호스트 설정
        echo "DATABASE_PORT=3306" >> .env
        echo "KAKAO_LOGIN_URL=${{ secrets.KAKAO_LOGIN_URL }}" >> .env
        echo "KAKAO_CLIENT_ID=${{ secrets.KAKAO_CLIENT_ID }}" >> .env
        echo "KAKAO_REDIRECT_URI=${{ secrets.KAKAO_REDIRECT_URI }}" >> .env
        echo "KAKAO_TOKEN_REQUEST_URI=${{ secrets.KAKAO_TOKEN_REQUEST_URI }}" >> .env
        echo "KAKAO_USERINFO_REQUEST_URI=${{ secrets.KAKAO_USERINFO_REQUEST_URI }}" >> .env
        echo "REDIS_HOST=${{ secrets.REDIS_HOST }}" >> .env
        echo "REDIS_PORT=${{ secrets.REDIS_PORT }}" >> .env
        echo "REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}" >> .env

    - name: Add wait-for-it script
      run: |
        wget https://raw.githubusercontent.com/vishnubob/wait-for-it/master/wait-for-it.sh
        chmod +x wait-for-it.sh

    - name: Wait for MySQL to be ready
      run: ./wait-for-it.sh 127.0.0.1:3306 --timeout=60 --strict -- echo "MySQL is up"

    - name: Test MySQL connection
      run: |
        sudo apt-get install -y mysql-client
        mysql --host=127.0.0.1 --user=${{ secrets.DATABASE_USER }} --password=${{ secrets.DATABASE_PASSWORD }} --database=${{ secrets.DATABASE_NAME }} -e "SHOW TABLES;"

    - name: Make migrations
      working-directory: ./TransFarmers
      run: |
        source .venv/bin/activate
        python manage.py makemigrations

    - name: Run migrations
      working-directory: ./TransFarmers
      run: |
        source .venv/bin/activate
        python manage.py migrate --noinput

    - name: Find test modules
      working-directory: ./TransFarmers
      id: find_tests
      run: |
        source .venv/bin/activate
        chmod +x find_test.sh
        TEST_MODULES=$(./find_test.sh)
        echo "TEST_MODULES=$TEST_MODULES" >> $GITHUB_ENV

    - name: Run tests
      working-directory: ./TransFarmers
      run: |
        source .venv/bin/activate
        python manage.py test $TEST_MODULES
